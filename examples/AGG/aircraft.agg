# input file to test geometry parser in AGG
global {
 radius = 1.4
 len = 5
 root = 1.5
 span = "len*0.7"
 dihedral = "5*pi/180"
 sweep = "10*pi/180"
 taper = 0.25
 twist = "5*pi/180"
 xle = "0.35*len"
 yle = "-0.0*radius"
 del = "span/100"
}


surface {
  name("wing:right")
  # section(0.0, "aerofoil", 0.5, 0.2, 0.0)
  #section(0.3, "aerofoil", 0.5, 0.12, 0.0)
  #section(0.9, "aerofoil", 0.5, 0.08, 0.0)
  section(0, "ellipse", 0.2)
  section(0.3, "ellipse", 0.12)
  section(0.9, "ellipse", 0.08)
  transform("shrink", 0, 0, "1+u*(taper-1)")
  transform(0.0,0.9,"scale", "root")
  transform(0.9, 1, "xscale", "root*sqrt((1-u)/0.1)^2")
  transform(0.9, 1, "yscale", "root*sqrt((1-u)/0.1)")
 #transform("yscale", "(1-u)^(1/8)")  
 #transform("rotate", 0, 0, "twist*u")
  transform("translate", "xle + span*sin(sweep)*u",
  			 "yle+span*sin(dihedral)*u",
			 "-del - span*u")
  patch("hemispherical", "nowrap", "wrap")
  grid("hemisphere-uv", 16, 16)
  invert()
}
 
 #surface {
 #  name("wing:left")
 #  #section(0.0, "aerofoil", 0.5, 0.2, 0.0)
 #  #section(0.3, "aerofoil", 0.5, 0.12, 0.0)
 #  #section(0.9, "aerofoil", 0.5, 0.08, 0.0)
 #  section(0, "ellipse", 0.2)
 #  section(0.3, "ellipse", 0.12)
 #  section(0.9, "ellipse", 0.08)
 #  transform("shrink", 0, 0, "1+u*(taper-1)")
 #  transform(0.0,0.9,"scale", "root")
 #  transform(0.9, 1, "xscale", "root*sqrt((1-u)/0.1)^2")
 #  ##transform(0.9, 1, "xscale", "root*sqrt((1-u)/0.1)")
 #  transform(0.9, 1, "yscale", "root*sqrt((1-u)/0.1)")
 #  ##transform("rotate", 0, 0, "twist*u")
 #  transform("translate", "xle + span*sin(sweep)*u",
 #  			 "yle+span*sin(dihedral)*u",
 #			 "del + span*u")
 #  patch("hemispherical", "nowrap", "wrap")
 #  grid("hemisphere-uv", 16, 16)
 #}

surface {
  name("fuselage")
  section(0, "circle")
  transform("translate", -0.5, 0, 0)
  transform("scale", "radius")
  transform("scale", "2*u^(0.5)*(1-u)^0.5")
  transform("translate", 0, 0, "len*u")
  patch("spherical", "nowrap", "wrap")
  axes("zxy")
  ##grid("triangle", 0.001)
  grid("sphere-uv", 32, 64)
}
