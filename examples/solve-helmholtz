#!/bin/bash

# defaults
k=0.0
nqa=7
nqp=7
nqu=25
tol=1e-6
eta=1.25
depth=5
order=8
nthreads=2
src=pcsource.bc
petsc=no
geometry=sphere

## path to executables, relative to subdirectories: trailing slash is required
bin=../../tools/

function print_help() {
    printf -- "$0 [options]\\n"
    printf -- "\\n"
    printf -- "Set up and run a Helmholtz boundary integral problem\\n"
    printf -- "\\n"
    printf -- "Options:\\n\\n"
    printf -- "-a number of adaptive quadrature points ($nqa)\\n"
    printf -- "-d maximum depth of adaptive quadrature ($depth)\\n"
    printf -- "-e exclusion parameter for elements ($eta)\\n"
    printf -- "-g geometry file name ($geometry)\\n"
    printf -- "-h print this message and exit\\n"
    printf -- "-i use installed executables (this requires that they be on PATH)\\n"
    printf -- "-k wavenumber (must be set explicitly to non-zero value)\\n"
    printf -- "-o singular quadrature order ($order)\\n"
    printf -- "-P use PETSc solver if available ($petsc)\\n"
    printf -- "-p number of quadrature points per element ($nqp)\\n"
    printf -- "-s boundary condition file (source) name ($src)\\n"
    printf -- "-T number of OpenMP threads to use ($nthreads)\\n"
    printf -- "-t solution tolerance ($tol)\\n"
    printf -- "-u number of upsampled quadrature nodes ($nqu)\\n"
    }

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) optarg= ;;
  esac

  case $1 in
      -a)
	  shift
	  nqa=$1
	  ;;
      -d)
	  shift
	  depth=$1
	  ;;
      -e)
	  shift
	  eta=$1
	  ;;
      -g)
	  shift
	  geometry=$1
	  ;;
      -h)
	  print_help
	  exit 0
	  ;;
      -i)
	  unset bin
	  ;;
      -k)
	  shift
	  k=$1
	  ;;
      -o)
	  shift
	  order=$1
	  ;;
      -P)
	  petsc=yes
	  ;;
      -p)
	  shift
	  nqp=$1
	  ;;
      -s)
	  shift
	  src=$1
	  ;;
      -T)
	  echo Hello
	  shift
	  nthreads=$1
	  ;;
      -t)
	  shift
	  tol=$1
	  ;;
      -u)
	  shift
	  nqu=$1
	  ;;
  esac
  shift
done

echo Helmholtz solve
echo ===============
echo Parameters:
echo 
echo "   wavenumber:                k=${k}"
echo "   adaptive quadrature:       nqa=${nqa}"
echo "   points per patch:          nqp=${nqp}"
echo "   upsample points per patch: nqu=${nqu}"
echo "   integration tolerance:     tol=${tol}"
echo "   separation parameter:      eta=${eta}"
echo "   FMM tree depth:            depth=${depth}"
echo "   singular quadrature order: order=${order}"
echo "   number of threads:         nthreads=${nthreads}"
echo "   boundary condition file    src=${src}"
echo "   use PETSC solver:          petsc=${petsc}"
echo

## store geometry and matrix data in subdirectories
mkdir -p Geometries
mkdir -p Matrices
gfile=Geometries/${geometry}-${nqp}.nbi
mfile=Matrices/matrix-${geometry}-helmholtz-${nqp}-${nqu}-${order}-${depth}.dat

## use geometry generator in example directory
echo Generating geometry ${gfile}
. make-geometry
echo

## assemble the problem matrices
opts="-e ${tol} -a ${nqa} -u ${nqu} -n ${eta} -d ${depth} -N ${order} \
      -m ${mfile} -g ${gfile} -k ${k}"
echo Assembling matrices with:
echo nbi-assemble-helmholtz ${opts}
${bin}nbi-assemble-helmholtz ${opts} -T ${nthreads}
echo

## solve the problem
opts="-m ${mfile} -g ${gfile} -D 5 -o 8 -d 2 -t 1e-6 \
      -f -T ${nthreads} -k ${k} -b ${src} -s solution.dat -i 4"
if test x$petsc = xyes ; then
    opts="${opts} -K ksp-options -P"
fi
echo Solving with:
echo nbi-solve-helmholtz ${opts}

## generate the source file, using the correct wavenumber
sed s/WAVENUMBER/${k}/ ${src}.in > ${src}

## solve with specified source, using PETSc solver if requested
${bin}nbi-solve-helmholtz ${opts} >& solution.log
echo

## generate solution on surface mesh for visualisation
tmpfile=`mktemp`
${bin}nbi-process -d solution.dat -g ${gfile} -o ${geometry}.msh -v "Surface" \
      2>&1 | tee ${tmpfile}

## find the indices of the first node and element of the visualization
## mesh, to avoid conflicts with the surface solution
offp=`grep point ${tmpfile} | cut -d: -f 2`
offe=`grep element ${tmpfile} | cut -d: -f 2`
rm ${tmpfile}

. make-visualization-grid
echo

## field radiated by surface solution
echo Computing radiated field
${bin}nbi-field-helmholtz -g ${gfile} -d solution.dat \
      -k ${k} -F grid.nbi > grid.dat
## generate gmsh files for visualization
${bin}nbi-process  -p ${offp} -e ${offe} -d grid.dat -g grid.nbi \
      -r 2 -o grid.msh -v "Grid"
echo
echo
